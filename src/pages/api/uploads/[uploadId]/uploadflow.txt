Let me map out the flow between the ChunkingService and EnhancedUploadSystem: 1. Initial Flow: ```typescript API Request -> EnhancedUploadSystem.handleUpload() -> ChunkingService.uploadWithChunkingV2() ``` 2. State Management Flow: ```typescript EnhancedUploadSystem ChunkingService ├─ createBlobClient() ├─ initializeUploadState() │ └─ initializes UploadState │ └─ maintains parallel state ├─ handleUpload() ├─ uploadWithChunkingV2() │ └─ manages upload lifecycle │ └─ handles chunked upload └─ updateUploadStatus() └─ emitProgress() └─ updates database └─ updates WebSocket ``` 3. Progress Tracking: ```typescript ChunkingService EnhancedUploadSystem ├─ emits progress events ├─ receives progress via callback │ via WebSocket │ in uploadOptions └─ maintains chunk state └─ updates database state ``` 4. State Synchronization: ```typescript uploadOptions.onProgress = (progress, chunkIndex, totalChunks, uploadedBytes) => { const state = this.currentUploadState.get(context.trackingId); if (state) { state.progress.chunksCompleted = chunkIndex; state.progress.totalChunks = totalChunks; state.progress.uploadedBytes = uploadedBytes; state.progress.progress = (uploadedBytes / state.metadata.fileSize) * 100; } } ``` 5. Cleanup Flow: ```typescript Both services maintain their own cleanup: - EnhancedUploadSystem.cleanupUploadState() - ChunkingService.cleanupUploadState() ``` Would you like me to: 1. Show how to better synchronize these states? 2. Explain any specific flow in detail? 3. Or focus on a different aspect?